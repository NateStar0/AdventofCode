
var input =
`Tile 1759:
.##.#..#..
..........
..#..#...#
##....####
###.##.##.
.#.#.#..#.
......#..#
##.....#..
..........
.##....#..

Tile 3803:
#.#.#.#.#.
#.........
#.....#...
#...#..#.#
#....#....
#..#.#...#
.##.#.##.#
#........#
#..#...#..
..#####.#.

Tile 2351:
......###.
##...##.##
.........#
..#.#.....
....#.##..
#.#.#.#.##
.##.#.##.#
....#...##
#..#...###
#.##...##.

Tile 2467:
#####.#.##
#........#
#.#....###
.......##.
....#....#
#.........
.......#.#
##.#..#..#
.#....#.##
..#....###

Tile 1933:
##.....###
#.#......#
....#...##
#.###.....
#.##.#..#.
....#....#
....##....
##........
#..##....#
.#.#.#...#

Tile 2971:
#.#.#.#..#
.........#
......#..#
##...#....
...###....
#....##...
.....#.#..
#....#.#.#
#.......#.
.###...#.#

Tile 2731:
.....#####
..##......
.......##.
.#........
#..#.#....
..........
#..##.#...
.#..###...
#.#..#....
..#.#.....

Tile 2423:
.####.#...
#.##.#...#
.....##...
##........
..#..#..##
#...######
....#...##
.....##...
...#...###
##.#..###.

Tile 1877:
.#...##..#
#..##....#
#.##......
...#......
.#........
#........#
#.....##.#
#.....##..
.........#
..####.#..

Tile 3461:
....##.##.
....##....
###......#
#.#...#...
#........#
.##..#.#.#
#.....#.#.
#.......#.
#........#
#.#.##.###

Tile 2137:
##.#.#...#
#..#.##..#
.##......#
#..#.#...#
###.#....#
#........#
#....#..#.
#...##.##.
...#.###..
##...#...#

Tile 2647:
##.##..#..
......#..#
.....#....
##......##
#.#.#..###
##.......#
#...###...
##...##..#
.....#....
###....##.

Tile 3253:
......#.#.
#.......#.
##..##....
#.#.##...#
.....#...#
...#..#..#
#.....#...
.#...#....
.#..#.##..
.###...##.

Tile 1409:
.###.###.#
#..#.##.##
........##
.###......
#####.####
..#..#.#.#
..#...##.#
..##..#.##
....#....#
####.....#

Tile 2503:
###.....##
.....#..#.
#...##....
.##..##..#
...#...#.#
.#..#.#...
#...#...##
#.........
##...#...#
...#....#.

Tile 1879:
.######.##
......#..#
..#.#..##.
..........
#..#.....#
.##.......
#.......##
..........
.........#
#.#.#.##..

Tile 3739:
#..#.#....
#.....#...
#.........
##....#..#
###..##..#
..#...#..#
#.####....
.##.......
.##......#
###..#.###

Tile 2713:
..#..#..#.
#.........
.#.....###
.#.##.#.##
.#.#.##...
.##..#.#.#
..####..#.
#..##.....
#....#....
.#..####..

Tile 2243:
#.##...##.
...#......
..#..#..##
....#....#
#....####.
.##.#...##
#..#..#...
#..###...#
#.##.#####
.#..#.###.

Tile 3307:
...####..#
....#.....
.###......
..#.......
.....#...#
#...#....#
#...#.....
.........#
#..###....
#####..#.#

Tile 2161:
###.#.#..#
#.#...###.
.##......#
##.#..#.#.
#.#.#..#.#
#..#.#....
...#....##
#.##...#.#
#......#..
..#.#.####

Tile 3257:
....##..##
#.........
..#..##.##
.#......#.
#...#....#
#.#...#.#.
....##...#
###....##.
.##...#..#
.#...#..##

Tile 1997:
..#.##.###
....#.....
..#......#
.#.#..#.#.
###...#.##
.#......##
..........
#........#
..#..#..##
##.#.#####

Tile 2741:
#####..###
#..#.....#
#...#...#.
....##...#
...#......
#..##.#...
###....###
........#.
##.###....
...#...###

Tile 2671:
##....#..#
........#.
.##.#..###
......##.#
#..#....##
....#...#.
#.#......#
###......#
...#......
..###.##.#

Tile 3943:
####...#.#
#..##.....
.#......#.
......##..
..#.....##
#...#....#
....##.#.#
..........
..#....#.#
..#.....##

Tile 1283:
..##...###
#..#....#.
#...#.....
.#.....##.
#.##....##
.#..#...#.
#....#...#
##....#...
.##...####
##..##.###

Tile 3067:
#.#.#.#.#.
#..#......
..##......
#..#...#.#
.##.#....#
......#...
#...#.#.##
.#..##..#.
...#...###
...##..#..

Tile 2957:
.#..###...
#........#
......#.##
...#..##.#
###....#.#
.....#..##
#.......#.
#....##.#.
......#.##
.##..#..##

Tile 1571:
..#...##.#
#..####..#
#.........
.#.###..##
#.....##.#
......#...
..#.......
.#........
........#.
####.#..##

Tile 1481:
#.#..##...
#...#....#
#.....#..#
..#......#
.#...#.#.#
....#..###
.#.###....
.....###..
.#....#..#
####..#..#

Tile 1637:
#.##...#..
.........#
#........#
.###.....#
##..#..#..
.#....#...
.......#.#
.....#....
#..##..#.#
#..###.#.#

Tile 1567:
####.#.#.#
...##.....
......#...
.#...##...
#.#....#.#
#.#......#
.###.....#
##..#..#..
...#......
########..

Tile 1117:
#..#.#.#.#
....#....#
.#.#..##..
....#.##..
##..#.....
...#......
#....#...#
...##..#.#
...#....#.
.#..#.##..

Tile 1663:
####..#...
#.#......#
......#...
....#..##.
#......#.#
...##....#
#........#
#.#..#...#
####.#....
..####.##.

Tile 3079:
.#....####
.#......#.
..........
......#..#
###..#.#.#
...#....##
..##.#####
..#.###..#
....##....
.#.######.

Tile 2011:
##.###....
..##.#.##.
##.##..#..
##.....##.
#...#...#.
.#.##.##.#
###..#.###
..#....#..
#.##..####
.......##.

Tile 1801:
.#..##..##
..#.###..#
....##....
#...#.#...
..##......
#.....#...
#.........
..##....##
#.#.#..#.#
..#.#..##.

Tile 1499:
...#..####
#.......#.
..........
#.....#..#
#..###....
#..#..##.#
...##.#..#
..#......#
..#.......
#.######..

Tile 1061:
###.#...##
#..###.##.
##.#......
#.#...#...
.....#..##
.#....#.#.
...#...#.#
...###....
.##..##.#.
#.#...#.##

Tile 1783:
#...####.#
#.....####
.#........
......##.#
..##....##
..#......#
#...#.#...
#........#
.#...#...#
.#######..

Tile 1301:
#.....#.##
#....#...#
#.##.#...#
.#..#.#..#
.#....#.#.
....##.##.
##..#...#.
.#...#.#..
...#.#....
..##......

Tile 1259:
#..###..##
....###..#
.#...#..#.
.....#...#
.#.##.....
#..#......
#.#.....#.
#...#....#
.....#.##.
#####...##

Tile 3823:
#..##..#..
#...#.....
.#.......#
#..#.##.#.
..........
#....#....
#.#.....##
..#.#.#...
..#......#
#..####.##

Tile 3181:
#.........
#......###
##....##..
......##.#
...#.##...
#.#..#...#
#.......#.
##...#....
#.....##.#
.####.####

Tile 3251:
...###.##.
...#.....#
##...#...#
#.####..##
...#.#..##
..#...#.##
##....#..#
.##.......
...#.#...#
..##..####

Tile 3121:
#..#....#.
#..##.#...
....#....#
#....#..#.
...#.....#
....#.....
.....#...#
...###...#
#..##...#.
.####.#...

Tile 3209:
##....#...
##.......#
.......#..
###.#...#.
..........
..#...#..#
..#.##..#.
##..#.....
#..####...
###..##..#

Tile 1049:
..#..#....
....##....
...#......
#...#.....
#..#.....#
...#.....#
.#.....##.
..#.#.##.#
..##.#.#.#
.##.###.#.

Tile 3671:
.###......
..###..#.#
....#.....
####......
#.#.#.....
#.......#.
..##...#..
.....#....
.##..#....
.##.#..##.

Tile 1171:
...###.##.
#.........
#.........
#........#
....##.#.#
#.....#..#
##..#.....
.......#..
...#.....#
.#####.###

Tile 3259:
###..##.#.
#..###..##
......##..
..#...#.#.
...#.#....
##....#..#
..#...##.#
.#....##..
........#.
.######...

Tile 1601:
#..#.#.###
......####
.#...##...
#......###
#...#....#
#....#.#.#
#...#..##.
..###.#...
#....##..#
.#.#..###.

Tile 2371:
.#.....#..
#.#..##...
.....#####
###..#.##.
#.####.#..
........#.
###......#
.........#
.......###
.##.###.#.

Tile 2153:
.#....#..#
#....#..##
#.........
.....##...
##.....##.
#.#......#
.#..##...#
##.#.#.#..
...#.....#
.#.##.##..

Tile 2269:
.#.#.#....
...#.....#
..#....#..
#.#.......
.#.#......
........##
..........
...#.....#
#.##...#.#
#.#....#..

Tile 1291:
##.##..#.#
##.#......
##..#.....
###...##..
.#..#.#..#
##...#...#
..#####...
###..####.
#.#......#
.#.#.##...

Tile 1487:
.##..##...
..#.#.##..
#...#...##
..#.#...#.
.###...#.#
..##.....#
...#.#...#
#.....#..#
#..#......
.##.#.####

Tile 3023:
########..
.#..#..#.#
###.###...
#.#......#
##.#.#..#.
.....#....
##..#.....
.##.......
.##......#
###..#...#

Tile 2887:
..#.#..#..
...#......
.......#.#
.......#..
#......#.#
#...#....#
..#....###
........#.
.#...#.##.
#.#..#.#..

Tile 2333:
#....##.#.
.#.......#
#....##..#
........##
#.........
..........
...##.#..#
#.#.#.....
.........#
###..#.##.

Tile 2311:
...####.#.
##.#......
#.#.......
#.##....##
...#.#..##
..#....#..
###.......
..#.##....
.#.###...#
#...###.##

Tile 1039:
.#..#.#.#.
....###...
##.......#
.##.......
..#......#
..........
#......#..
#....##..#
#.....#..#
..#.##..##

Tile 3571:
....#....#
#...#...##
##......##
..........
..#.......
.........#
...##.##.#
.#####....
.....#....
.#..#.....

Tile 2221:
##.#.###..
.###..#...
.#...#...#
#....#....
#..#.#....
#.#......#
#......###
..##.#....
#...###..#
#.##......

Tile 1361:
.#.#.#.#..
.##..##...
...##.....
#...##..##
##.##..#.#
...#..#...
#...#..#..
#........#
...#......
#..#...###

Tile 3637:
.#####...#
#........#
#..##.#.#.
#.........
#..##.....
.#....#...
...#....##
...###..#.
#....#.#..
##.#.#..##

Tile 3083:
.#....#.##
#....#....
#...#...#.
....#....#
.#.#..##.#
######..#.
#.###.....
.#........
#........#
###..###..

Tile 1619:
.###...##.
#....#...#
..#..#....
#...#.####
#.....#.#.
#..#......
..#..##..#
#..###....
#..#.#.#..
#..##..#.#

Tile 2063:
.#..#.....
#....#....
#..#.###..
#.#...#...
#....##.##
#...##..#.
#........#
..#...#...
...#..#...
#......#..

Tile 3911:
##..##....
##.......#
###....###
##.#.###.#
..#.......
#..#.#.###
.#.#.#.###
####..####
..##.##.#.
......#..#

Tile 2447:
#.......#.
##...##.#.
#.#..#...#
......###.
.#....#.##
..#...#..#
....#.#..#
#...#....#
..#.......
...##.#...

Tile 3191:
.#....#.#.
#..#...#.#
........##
....#..#..
#......#.#
#...##....
#......#.#
.##...#...
##....#...
#.####...#

Tile 1733:
..###..###
..........
#.##....#.
#..#...#.#
#..#.....#
..........
.........#
.......#..
#........#
.#.##.....

Tile 3533:
###.#...##
.........#
...##.#.#.
#........#
#..#...#..
.#.......#
#.#...#...
##.#..##..
#...##.###
...#.#.#.#

Tile 3767:
.######..#
##.#####..
....#.#...
#....##..#
.....#.#.#
#...#..#..
#...#...##
#.###.#..#
..........
#.#.#..#.#

Tile 2531:
.#.#...#..
....#....#
......#..#
#...#....#
##.......#
.#..####..
..##..#.##
#........#
#.....####
..##..####

Tile 3329:
##..#.##.#
....#...#.
##..#..#.#
##..#.#.##
...#...#..
.#####...#
...#....##
###...#...
..........
#######.##

Tile 2473:
##.#.####.
#.#.......
.......#.#
#.#.#.#...
....#..#..
#####....#
#..#..##..
#...#.....
.....#.#.#
##.#...##.

Tile 2851:
#......#..
#.#....##.
..........
#..##...##
#.#.#....#
#...#.....
#.#...##.#
##.#.#..##
#.#.......
##.##.....

Tile 2111:
#..###..#.
#...#.#.##
#.....#...
#.....####
#..##.#...
....##..#.
....#.....
...###.###
..#.#.....
#..#..#.##

Tile 3001:
..#.###...
......##..
..#...####
#..#.#....
##..#.....
..#.....##
.....##..#
.#.#..#..#
#.....#.##
..##......

Tile 2549:
.#..#..###
#..#.#.##.
.....#....
####..#..#
......#.#.
#.....#.#.
..........
##..#...##
...##....#
...###..#.

Tile 3989:
.......#.#
..##.#.###
#..##..#.#
..........
.#.##..#..
.....#...#
..#.#..###
.....###..
##...##...
.####.....

Tile 3049:
##...#####
###.#...##
#....#...#
#........#
#....#....
##..##..#.
..###.#..#
#.###.....
#...#.....
#.####.#.#

Tile 1721:
..###.#.##
#........#
.#.#...#.#
#.##.#.###
#..###..##
.....##..#
##.#.##..#
#......#.#
....##.#..
.#.......#

Tile 2791:
###.#.#...
#....#....
....##...#
...#.##.##
...#...#..
...###.##.
.#.#..#..#
##.##...##
.##..#.##.
#..##..###

Tile 2083:
#.#..#..##
.#....##.#
..#......#
#.........
....##...#
.......#.#
..###....#
###.....#.
###....##.
...#.#...#

Tile 3613:
.###.#..#.
#.#..##..#
#.###.#...
.#.....#.#
......#..#
......#...
.#.#...#.#
#.......##
......#..#
#..#.#.#..

Tile 1201:
..#.#...#.
#.....#...
#..##..#..
.#...#...#
#..##....#
#..#..#..#
.##.#..#.#
#..#......
...#..#...
#...##..##

Tile 3119:
#..#.##..#
#.#...#...
##....#.#.
#..#..#.##
#.........
...##..##.
#...#..#.#
#.........
#..#....#.
#.##.#.##.

Tile 2459:
.#....###.
....#.#...
#..#.#....
#...#..#..
#........#
.#.#......
....#...#.
#...#....#
..#.#.....
##.##..###

Tile 2341:
#..#..###.
#.#......#
#.#....#.#
##........
.#.##..#.#
.###......
.......#.#
##...#.#..
####...#.#
.#...###.#

Tile 3011:
###..#..##
...#.###..
#........#
.##.#...#.
.....#####
........##
.........#
#......#..
###.......
#..###.###

Tile 3727:
#.###..##.
#...#....#
...#....##
##..#....#
.........#
##..#.....
#.........
.##.......
#.##.###.#
#..#.#...#

Tile 2659:
#.##.###..
.........#
#...#..#..
.#..#.#...
....##...#
#..#.##...
#.##.....#
..........
...##..#..
#.##..#.#.

Tile 2657:
#...######
..#...#...
..#......#
...#...#..
......###.
#......##.
#..#..#..#
#.#.#..#..
.###..#...
#......###

Tile 2789:
#.....#..#
...#..###.
#.#.......
#........#
.#.#....#.
...#.....#
.#.....###
##.##....#
.##...#...
#####..#.#

Tile 1627:
#.##..#.##
#...##.#.#
....#....#
##..#...##
.....#...#
.#..#....#
........#.
#.#.###.##
.#.##.#..#
.#.###.#..

Tile 3167:
..###.#...
.....#..##
#..##.....
#.#..##.#.
#.....#.##
####.....#
#.###..#..
.##....#..
.#..#.....
#....#.#.#

Tile 3229:
###...#.##
##....##..
#.......##
...##....#
#.#.....#.
........##
##...#...#
#........#
..#......#
..#.....##

Tile 2383:
#.####.###
.#.#...#..
####..#.#.
.#..#.#..#
..#.#..#..
##.....#..
.....#.#.#
...##..#.#
##...####.
##...#.#.#

Tile 1381:
#.#.#.####
........##
.#..#..#..
#.....##..
.#...#.#.#
#.....#..#
...##..#..
..####....
##........
..######.#

Tile 3089:
..#..####.
.....#...#
.#........
.###..#.##
#..#.....#
#..##..#.#
##.....#.#
#...#.#...
.....#...#
...##.##.#

Tile 1229:
##..#....#
##.#.#...#
#...#..###
#.........
.......#..
...#.....#
#.#.......
..........
#...#.##..
.#...#####

Tile 3691:
.####.#.#.
#..#.##..#
.....#.###
#....#..##
##........
#...##.#.#
#.....#..#
..#.#.....
.##...##.#
#.##..#...

Tile 1019:
...##.#..#
#..#.....#
.........#
##..#..#..
#.....#...
#....#.#..
#.#..#....
#.#...#..#
##....#..#
.#.#####..

Tile 3217:
#.##..##..
#.#...###.
#.#....#.#
.#.#......
##.......#
...#.#..#.
##.#......
#.#.....##
.#........
.######...

Tile 2833:
....###.##
##........
....###...
....##....
.#.#......
..#...##.#
#.##....##
.###.#....
...##..#.#
.#.#....#.

Tile 1493:
...#.#.#.#
#.#..#....
#...#....#
.##......#
..#.##...#
#.........
.........#
##....#..#
#.#.......
.#.#..#..#

Tile 2963:
.##..#..##
#.#.....#.
#........#
#..#.#....
#........#
##....#..#
#.....##.#
###......#
.#....#...
......#..#

Tile 1873:
.###.#.#..
...##.....
#...#.....
.......#.#
.#.....#.#
...#....#.
..#..#....
##..#.#...
..#....###
#.##.#####

Tile 2539:
#..#...#.#
##.......#
#..#..#..#
......#.#.
..........
.###.#.##.
##.#.##..#
.......###
..#.###...
##.####...

Tile 2339:
#.###.#.##
#.....#..#
..........
#.........
......##.#
#..#.###.#
#.........
.......#..
.........#
...##.....

Tile 1303:
....##.###
#.#..#...#
.........#
#.....#.##
.#..#....#
.......#.#
...#....#.
#.####...#
.#.#....#.
##...#..#.

Tile 3539:
.#........
.#..#.##.#
###..##.##
....#....#
#......#..
#.###.#.##
.........#
..#...#.#.
##......#.
.#..#....#

Tile 1153:
#..##.#.##
#.#...#.##
#..##..#..
#..#..#..#
####.#.###
#...#...#.
#.....#...
#..##..#.#
.##.###.##
####.#.###

Tile 2273:
#.#....##.
###..####.
##....####
##.....#..
..#.....#.
....#...##
##........
.#.......#
#........#
.#..#.##.#

Tile 2543:
..###...#.
#..#..#...
####....#.
...###..#.
...#.#..##
###.#.....
#.........
##.....#..
..#...#...
..####...#

Tile 1451:
.#.####.##
.....#.#.#
.##.......
..#......#
...#.#..##
..#......#
#...##..##
#.#.......
#.........
#..#..#...

Tile 3203:
..###.....
#...#....#
###..##...
..........
###....#..
........##
...#......
#......##.
....#.#..#
.###.##...

Tile 1009:
..#.#..##.
##..#....#
#..##...##
##...#...#
##...#..#.
...#...###
....##.#..
....#.##.#
...##.####
....#.#...

Tile 1531:
.....#.##.
.#.####...
....##.#.#
#...#...##
#....##.#.
###......#
..#..##...
#..#.....#
..#....#.#
###.#..#..

Tile 3617:
.##.##.#.#
#....#..#.
.#....#.#.
#.........
.#...##..#
.##.#.##.#
#.#.#.##.#
.....###..
.#..#.##.#
.#.....##.

Tile 2617:
#..##.#..#
#..#....#.
.#.......#
#..#......
.###.####.
..#.....##
..#..#....
..#.......
....#.....
#....#####

Tile 1847:
..#.#...#.
.##....#..
###.#.##.#
..#.##..##
#####...#.
.###.#...#
#.......##
..#.#..#..
...##.#...
.###.#.##.

Tile 3299:
..#.##.##.
...##.....
#........#
...#.##.#.
.#####....
#..#.#..##
#..#..#.##
..#..#...#
#.#.#.....
.#...#..#.

Tile 2591:
......#.#.
#....#...#
##......##
...#...#..
..#.......
.....#.#.#
#.......##
..###...##
#..#..##.#
.....#.##.

Tile 3169:
###...##.#
..#..##..#
#..###...#
.#..#....#
..#......#
....#.#...
.##.#..###
..##...##.
###.......
##..#.####

Tile 3697:
..#.#.#..#
.###.#...#
#.##...##.
.#.##.#...
#..##....#
..........
#....#....
.##.......
#..#.#.##.
#.....#..#

Tile 2551:
#.##..#..#
#..#......
.#..#.....
#....#..#.
#.......##
.#..#....#
.#........
....#.....
.#.##.....
###.#.#...

Tile 2909:
.....#.#..
.#.#.....#
#....##...
#......##.
...#......
##.......#
......###.
#..#.##...
...#...##.
#.##...###

Tile 2027:
.#.#.####.
..##.....#
#...##.###
.##.#.....
##.##....#
....#.#...
#.##....#.
..###..#.#
#...#.#.##
##..#.##.#

Tile 3947:
#.#.#.##.#
.#........
#....##..#
#.........
.....#...#
......#...
#.#.##...#
.##.#.....
.........#
.###.#...#

Tile 3797:
#...####..
.#....##..
#.....#...
.....#.#.#
...#..##..
.....#...#
......##.#
.##...#...
.....##...
.#..#.#.#.

Tile 3187:
##...#..#.
#..#..#..#
#........#
......#.#.
......##..
#.#.......
#.#......#
##...#..##
##..#...##
####...#.#

Tile 1151:
..#..#..##
...#.#....
#.#.#....#
..#......#
...##....#
..#.......
#......#..
#.##..#...
#.#....###
######.#..

Tile 1511:
#...#.....
#.######.#
#.....#...
....#...#.
#..###.#.#
.....#.#.#
....#....#
#..#...##.
#........#
#....#.##.

Tile 2293:
##...#...#
#......#..
.#..#.....
#...###..#
##....#..#
#...##.#.#
....#.....
....#.....
#.....#.##
##.#.##.##

Tile 2131:
#.#..#.#..
#..#...#..
#.##..#...
....##..#.
#........#
#..#.....#
##.......#
####.#...#
.##..#.#..
###..#..#.

Tile 2711:
..###.....
..#.......
..##...##.
##..#..##.
.#...#....
.....#....
#...#....#
.##.#.#..#
#.##.#....
##.#..##.#

Tile 1543:
##.....##.
#...###...
...#.#..#.
#.#...#.##
.#.#.###..
####...###
#..##..#..
####..#.##
#.##...#..
...#..#.#.

Tile 1723:
.#####.###
....##....
##........
#.......#.
#..####..#
.####..##.
.#........
#..#..#...
..........
..#.#.##..

Tile 2819:
..#..##.##
.....#....
#.#.....##
..#.......
..##..#.#.
#....#...#
#...#...#.
..#.......
.........#
#.#..###..
` 

function part1(data)
{
	var tile_master = data.split("\n\n");
	var tile_collection = [];
	var boarders = [];
	
	tile_master.forEach((tile) =>
	{
		var arr = [];
		var spl = tile.split("\n");
		
		var listarr = [];
		
		var left = "";
		var right = "";
		
		for(var i = 1; i < spl.length; i++)
		{
			left += spl[i].charAt(0);
			right += spl[i].charAt(spl[i].length - 1)
		}
		
		listarr[0] = spl[1]
		listarr[1] = left
		listarr[2] = right
		listarr[3] = spl[spl.length - 1];
		
		boarders.push(spl[1]);
		boarders.push(left);
		boarders.push(right);
		boarders.push(spl[spl.length - 1]);
		
		boarders.push(reverseString(spl[1]));
		boarders.push(reverseString(left));
		boarders.push(reverseString(right));
		boarders.push(reverseString(spl[spl.length - 1]));
		
		arr.push(spl[0].substring(5, 9));
		arr.push(listarr)
		
		tile_collection.push(arr);
	})
	
	function checkForDuplicates(arr, val) 
	{
		var numb = 0;
		for(var i = 0; i < arr.length;i++)
		{
			if(arr[i] == val)//|| arr[i] == reverseString(val))
			{			  
				numb++
			}
			
			if(numb == 2)
			{
				return true;
			}
		}
		  
		return false;;
	}
	
	function reverseString(str) 
	{
		return (str === '') ? '' : reverseString(str.substr(1)) + str.charAt(0);
	}
	
	function has(arr, val)
	{
		return checkForDuplicates(arr, val) * 1 || checkForDuplicates(arr, reverseString(val)) * 1 || 0;
	}
	
	var sum = 1;
	var tally = 0;
	var done = [];
	var corners = [];
	var last = 0;
	tile_collection.forEach((tile) => 
	{
		console.log(tile, has(boarders, tile[1][0]), has(boarders, tile[1][1]), has(boarders, tile[1][2]), has(boarders, tile[1][3]))
		var matches = has(boarders, tile[1][0]) + has(boarders, tile[1][1]) + has(boarders, tile[1][2]) + has(boarders, tile[1][3])
		var match_arr = [has(boarders, tile[1][0]), has(boarders, tile[1][1]), has(boarders, tile[1][2]), has(boarders, tile[1][3])]
		//console.log(match_arr, done.includes(match_arr))
		if(matches == 2)
		{		
			var proc = 8 * has(boarders, tile[1][0]) + 4 * has(boarders, tile[1][1]) + 2 * has(boarders, tile[1][2]) + has(boarders, tile[1][3])
			if(!done.includes(match_arr) && proc != last)
			{
				sum *= tile[0] * 1;
				tally += 1;
				last = 8 * has(boarders, tile[1][0]) + 4 * has(boarders, tile[1][1]) + 2 * has(boarders, tile[1][2]) + has(boarders, tile[1][3])
				done.push([has(boarders, tile[1][0]), has(boarders, tile[1][1]), has(boarders, tile[1][2]), has(boarders, tile[1][3])]);
				corners.push(tile[0])
				console.log(done, corners)
			}
		}
	})
	
	return sum;
}

function part2(data)
{
	var tile_master = data.split("\n\n");
	var tile_collection = [];
	var boarders = [];
	
	tile_master.forEach((tile) =>
	{
		var arr = [];
		var spl = tile.split("\n");
		
		var listarr = [];
		
		var left = "";
		var right = "";
		
		for(var i = 1; i < spl.length; i++)
		{
			left += spl[i].charAt(0);
			right += spl[i].charAt(spl[i].length - 1)
		}
		
		listarr[0] = spl[1]
		listarr[1] = left
		listarr[2] = right
		listarr[3] = spl[spl.length - 1];
		
		boarders.push(spl[1]);
		boarders.push(left);
		boarders.push(right);
		boarders.push(spl[spl.length - 1]);
		
		boarders.push(reverseString(spl[1]));
		boarders.push(reverseString(left));
		boarders.push(reverseString(right));
		boarders.push(reverseString(spl[spl.length - 1]));
		
		arr.push(spl[0].substring(5, 9));
		arr.push(listarr)
		
		tile_collection.push(arr);
	})
	
	function reverseString(str) 
	{
		return (str === '') ? '' : reverseString(str.substr(1)) + str.charAt(0);
	}
	
	String.prototype.replaceAll = function(search, replacement) {
    var target = this;
    return target.split(search).join(replacement);
	}
	
	console.log(tile_collection.length)
	
	var first = tile_collection[0];
	
	tile_collection.forEach((tile) =>
	{
		//Get the tile, rotate to get into a nice spot, insert into the array
	})
	
	console.log(image_arr);
	
	var img = "";
	//add all the shit into a single string
	
	//Define the conster shape
	var monst = [
        '                  # ',
        '#    ##    ##    ###',
        ' #  #  #  #  #  #   ',
    ]
	
	//Get the number of #'s
	
	//Get the number of non-monster #'s
	
	return 0;
}

function part2_var(data) {
	const SIZE = 10;
	const MONSTER = [
	  '                  # '.split(''),
	  '#    ##    ##    ###'.split(''),
	  ' #  #  #  #  #  #   '.split(''),
	];
	const MONSTER_WIDTH = MONSTER[0].length;
	const MONSTER_HEIGHT = MONSTER.length;
	const MONSTER_COORDINATES = [];
	for (let k = 0; k < MONSTER_HEIGHT; k++) {
	  for (let l = 0; l < MONSTER_WIDTH; l++) {
		if (MONSTER[k][l] === '#') MONSTER_COORDINATES.push([k, l]);
	  }
	}

	class BaseMatrix {
	  constructor() {
		this.current = [[]];
		this.currentEdges = new Map();
	  }

	  flipVertically() {
		for (let i = 0; i < this.width; i++) {
		  this.current[i].reverse();
		}
		this.refreshEdges();
	  }

	  rotate90clockwise() {
		const X = this.width / 2;
		const Y = this.width - 1;
		for (let i = 0; i < X; i++) {
		  for (let j = i; j < Y - i; j++) {
			const k = this.current[i][j];
			this.current[i][j] = this.current[Y - j][i];
			this.current[Y - j][i] = this.current[Y - i][Y - j];
			this.current[Y - i][Y - j] = this.current[j][Y - i];
			this.current[j][Y - i] = k;
		  }
		}
		this.refreshEdges();
	  }

	  refreshEdges() {
		this.currentEdges.set('top', this.current[0].join(''));
		this.currentEdges.set('bottom', this.current[this.width - 1].join(''));
		this.currentEdges.set('left', this.current.map((line) => line[0]).join(''));
		this.currentEdges.set(
		  'right',
		  this.current.map((line) => line[this.width - 1]).join('')
		);
	  }

	  *getNextPosition() {
		yield true;
		this.rotate90clockwise();
		yield true;
		this.rotate90clockwise();
		yield true;
		this.rotate90clockwise();
		yield true;
		this.rotate90clockwise();
		this.flipVertically();
		yield true;
		this.rotate90clockwise();
		yield true;
		this.rotate90clockwise();
		yield true;
		this.rotate90clockwise();
		yield true;
		this.rotate90clockwise();
		this.flipVertically();
		this.rotate90clockwise();
		this.flipVertically();
		yield true;
		this.rotate90clockwise();
		yield true;
		this.rotate90clockwise();
		yield true;
		this.rotate90clockwise();
		yield true;
		yield false;
	  }

	  print() {
		for (const line of this.current) {
		  console.log(line.join(''));
		}
	  }
	}

	class Tile extends BaseMatrix {
	  constructor(blob) {
		super();
		[this.title, this.raw] = blob.split(':\n');
		this.id = Number(this.title.slice(5, 10));
		this.original = this.extract(this.raw);
		this.width = SIZE;

		// Needed for part 1
		this.simpleEdges = this.getEdges();
		this.matchedEdges = 0;

		// Needed for part 2
		this.current = this.original.map((line) => [...line]);
		this.refreshEdges();
	  }

	  extract(blob) {
		return blob.split('\n').map((line) => line.split(''));
	  }

	  getEdges() {
		const edges = [
		  this.original[0],
		  this.original.map((line) => line[0]),
		  this.original.map((line) => line[this.width - 1]),
		  this.original[this.width - 1],
		];
		edges.push(...edges.map((edge) => [...edge].reverse()));
		return edges.map((array) => array.join(''));
	  }

	  hasMatch(tileMap, where) {
		for (const [key, tile] of tileMap) {
		  if (tile.simpleEdges.includes(this.currentEdges.get(where))) return true;
		}
		return false;
	  }

	  hasRightAndBottomMatch(tileMap) {
		return this.hasMatch(tileMap, 'right') && this.hasMatch(tileMap, 'bottom');
	  }

	  orientInitial(tileMap) {
		while (true) {
		  this.rotate90clockwise();
		  if (this.hasRightAndBottomMatch(tileMap)) {
			return;
		  }
		}
	  }

	  matchesTiles(otherTile, where) {
		switch (where) {
		  case 'top':
			return (
			  otherTile.currentEdges.get('bottom') === this.currentEdges.get('top')
			);
		  case 'right':
			return (
			  otherTile.currentEdges.get('left') === this.currentEdges.get('right')
			);
		  case 'left':
			return (
			  otherTile.currentEdges.get('right') === this.currentEdges.get('left')
			);
		  case 'bottom':
			return (
			  otherTile.currentEdges.get('top') === this.currentEdges.get('bottom')
			);
		  default:
			throw Error;
		}
	  }

	  match(knownNeighbors) {
		const positionIterator = this.getNextPosition();
		while (positionIterator.next().value === true) {
		  let abort = false;
		  for (const where in knownNeighbors) {
			if (knownNeighbors[where]) {
			  if (!this.matchesTiles(knownNeighbors[where], where)) {
				abort = true;
				break;
			  }
			}
		  }
		  if (abort) {
			continue;
		  } else {
			return true;
		  }
		}
		return false;
	  }
	}

	class Image extends BaseMatrix {
	  constructor(positions) {
		super();
		const width = Math.sqrt(positions.size);
		this.width = width * (SIZE - 2);
		this.current = new Array(width * (SIZE - 2));
		for (let i = 0; i < this.current.length; i++) {
		  this.current[i] = new Array(width * (SIZE - 2));
		}
		for (let i = 0; i < width; i++) {
		  for (let j = 0; j < width; j++) {
			const currentTile = positions.get(`${i}-${j}`);
			for (let k = 1; k < SIZE - 1; k++) {
			  for (let l = 1; l < SIZE - 1; l++) {
				this.current[i * (SIZE - 2) + k - 1][j * (SIZE - 2) + l - 1] =
				  currentTile.current[k][l];
			  }
			}
		  }
		}
	  }

	  findMonsters() {
		let numMonsters = 0;
		const positionIterator = this.getNextPosition();
		while (numMonsters === 0 && positionIterator.next().value === true) {
		  for (let i = 0; i <= this.width - MONSTER_HEIGHT; i++) {
			for (let j = 0; j <= this.width - MONSTER_WIDTH; j++) {
			  if (
				MONSTER_COORDINATES.every(
				  ([k, l]) => this.current[i + k][j + l] === '#'
				)
			  ) {
				numMonsters++;
				MONSTER_COORDINATES.map(
				  ([k, l]) => (this.current[i + k][j + l] = '0')
				);
			  }
			}
		  }
		}
		return numMonsters;
	  }

	  countClear() {
		let num = 0;
		for (let i = 0; i < this.width; i++) {
		  for (let j = 0; j < this.width; j++) {
			if (this.current[i][j] === '#') num++;
		  }
		}
		return num;
	  }
	}

	const tiles = data.split('\n\n').map((blob) => new Tile(blob))

	// part 1
	const cornerCandidates = [];
	for (const tile of tiles) {
	  for (const comparisonTile of tiles) {
		if (tile.id === comparisonTile.id) continue;
		for (const edge of tile.simpleEdges) {
		  if (comparisonTile.simpleEdges.includes(edge)) tile.matchedEdges++;
		}
	  }
	  if (tile.matchedEdges === 4) cornerCandidates.push(tile.id);
	}
	console.log('part 1: ' + cornerCandidates.reduce((a, b) => a * b, 1));

	// part 2
	// 1) Keep track of tiles left to place
	const candidates = new Map();
	tiles.map((tile) => candidates.set(tile.id, tile));
	const positions = new Map();
	// 2) Start from one corner. Orient it so that it is top left
	width = Math.sqrt(candidates.size);
	const startingCorner = candidates.get(cornerCandidates[0]);
	candidates.delete(startingCorner.id);
	startingCorner.orientInitial(candidates);
	positions.set('0-0', startingCorner);
	// 3) Orient and find all corners
	for (let i = 0; i < width; i++) {
	  for (let j = 0; j < width; j++) {
		if (positions.has(`${i}-${j}`)) {
		  continue;
		}
		const knownNeighbors = {
		  left: positions.get(`${i}-${j - 1}`),
		  top: positions.get(`${i - 1}-${j}`),
		  right: positions.get(`${i}-${j + 1}`),
		  bottom: positions.get(`${i + 1}-${j}`),
		};
		for (const [id, candidateTile] of candidates) {
		  const canMatch = candidateTile.match(knownNeighbors);
		  if (canMatch) {
			candidates.delete(id);
			positions.set(`${i}-${j}`, candidateTile);
		  }
		}
	  }
	}
	// 4) Merge image and find monsters
	const image = new Image(positions);
	const numMonsters = image.findMonsters();
	// image.print();
	return image.countClear();
}

var run = 1;
if(run == 0) console.log("Part 1: ", part1(input));
if(run == 1) console.log("Part 2: ", part2_var(input));
